name: CI

on:
  push:
    branches:
    - "master"
    tags:
    - "*"
  pull_request:

permissions: read-all

jobs:
  run-tests:
    runs-on: ubuntu-latest
    services:
      minio:
        image: minio/minio:edge-cicd
        ports:
          - 9001:9000
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        volumes:
          - ${{ github.workspace }}/data:/data
        options: --name=minio --health-cmd "curl http://localhost:9000/minio/health/live"

    container:
      image: ghcr.io/pivotal-cf/om-ci:latest

    steps:
      # - 
      #   name: Setup minio
      #   run: |
      #     mkdir ./miniodata && \
      #     minio server --config-dir ./miniodata --address :9001  ./miniodata & sleep 10 && \
      #     mc --debug config host add testing http://127.0.0.1:9001 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD && \
      #     mc mb --debug --ignore-existing testing/this is test 
      #   env:
      #     MINIO_ROOT_USER: minio
      #     MINIO_ROOT_PASSWORD: password
      #     AWS_ACCESS_KEY_ID: minio
      #     AWS_SECRET_ACCESS_KEY: password
      #     AWS_EC2_METADATA_DISABLED: true

      # # - 
      #   name: Test Minio
      #   run: |
      #     mc mb --debug --ignore-existing testing/${TEST_BUCKET} && \
      #     echo "TESTFILE0" >> [pivnet-example-slug,1.10.1]example-product.pivotal
      #     echo "TESTFILE2" >> [stemcells-ubuntu-xenial,97.57]light-bosh-stemcell-97.57-google-kvm-ubuntu-xenial-go_agent.tgz
      #     mc cp [pivnet-example-slug,1.10.1]example-product.pivotal testing/${TEST_BUCKET}/some/product/[pivnet-example-slug,1.10.1]example-product.pivotal && \
      #     mc cp [stemcells-ubuntu-xenial,97.57]light-bosh-stemcell-97.57-google-kvm-ubuntu-xenial-go_agent.tgz testing/${TEST_BUCKET}/some/product/[pivnet-example-slug,1.10.1]example-product.pivotal && \
      #     mc ls testing/${TEST_BUCKET}
      #   env:
      #     TEST_BUCKET: testbucket-1
      #     MINIO_ROOT_USER: minio
      #     MINIO_ROOT_PASSWORD: password
      #     AWS_ACCESS_KEY_ID: minio
      #     AWS_SECRET_ACCESS_KEY: password
      #     AWS_EC2_METADATA_DISABLED: true

      -
        name: Checkout OM
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: om

      -
        name: Checkout docs-platform-automation
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: pivotal/docs-platform-automation
          path: docs-platform-automation

      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
 
      # - 
      #   name: Test
      #   run: |
      #     mkdir ./miniodata && \
      #     minio server --config-dir ./miniodata --address :9001  ./miniodata & sleep 5 && \
      #     mc --debug config host add testing http://localhost:9001 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD && \
      #     go test -v ./...
      #   working-directory: om
      #   env:
      #     MINIO_ROOT_USER: minio
      #     MINIO_ROOT_PASSWORD: password
      #     AWS_ACCESS_KEY_ID: minio
      #     AWS_SECRET_ACCESS_KEY: password
      #     AWS_EC2_METADATA_DISABLED: true
      #     GO112MODULES: "on"

      - 
        name: Test
        run: ginkgo -r -race -succinct -nodes 1 -randomizeAllSpecs -randomizeSuites -keepGoing .
        working-directory: om
        env:
          GO112MODULES: "on"
          CGO_ENABLED: 1

      - 
        name: Build
        run: go build -v ./...
        working-directory: om
        env:
          GO112MODULES: "on"
      
      # -
      #   if: startsWith(github.ref, 'refs/tags/')
      #   name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -
      #   if: startsWith(github.ref, 'refs/tags/')
      #   name: Run GoReleaser
      #   uses: goreleaser/goreleaser-action@v2
      #   with:
      #     distribution: goreleaser
      #     version: latest
      #     args: release --rm-dist
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}